fullnameOverride: icp-mongodb
nameOverride: icp-mongodb

replicaSet: rs0
replicas: 3
minAvailable: 1
port: 27017
serviceName: mongodb
configDir: /data/configdb
#clusterDomain: cluster.local

# Specs for the Docker image for the init container that establishes the replica set
installImage:
  repository: ibmcom/icp-mongodb-install
  tag: latest
  pullPolicy: IfNotPresent

# Specs for the MongoDB image
image:
  repository: ibmcom/icp-mongodb
  tag: 4.0.6-f1
  pullPolicy: IfNotPresent

curl:
  image:
    repository: ibmcom/curl
    tag: 4.2.0-f3
    pullPolicy: IfNotPresent


## Optionally specify an array of imagePullSecrets.
#imagePullSecrets: []
#   - myregcred

# Annotations to be added to MongoDB pods
podAnnotations: {}

resources:
  limits:
    memory: 8Gi
  requests:
    memory: 4Gi

## Node selector
## ref: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/#nodeselector
nodeSelector: {
  master: "true"
}

nodeSelectorEnabled: true

affinity: {}

tolerations: [
  {
    key: "dedicated",
    operator: "Exists",
    effect: "NoSchedule"
  },
  {
    key: "CriticalAddonsOnly",
    operator: "Exists"
  },
  {
    effect: "NoExecute",
    key: "node.kubernetes.io/not-ready",
    operator: "Exists"
  },
  {
    effect: "NoExecute",
    key: "node.kubernetes.io/unreachable",
    operator: "Exists"
  }
]

terminationGracePeriodSeconds: 30

# Readiness probe
readinessProbe:
  initialDelaySeconds: 5
  timeoutSeconds: 1
  failureThreshold: 3
  periodSeconds: 10
  successThreshold: 1

# Liveness probe
livenessProbe:
  initialDelaySeconds: 30
  timeoutSeconds: 5
  failureThreshold: 3
  periodSeconds: 10
  successThreshold: 1

persistentVolume:
  enabled: false
  ## mongodb-replicaset data Persistent Volume Storage Class
  ## If defined, storageClassName: <storageClass>
  ## If set to "-", storageClassName: "", which disables dynamic provisioning
  ## If undefined (the default) or set to null, no storageClassName spec is
  ##   set, choosing the default provisioner.  (gp2 on AWS, standard on
  ##   GKE, AWS & OpenStack)
  ##
  # storageClass: "-"
  #accessModes:
  #  - ReadWriteOnce
  #size: 10Gi
  #annotations: {}

# Annotations to be added to the service
serviceAnnotations: {}

#CS??? workaround
priorityClassNameEnabled: true

securityContext:
  enabled: true
  values:
    runAsUser: 999
    fsGroup: 999
    runAsNonRoot: true
    allowPrivilegeEscalation: false

auth:
  enabled: true
  adminUser: admin
  #adminPassword:
  key: icptest
  # existingKeySecret:
  # existingAdminSecret:


tls:
  # Enable or disable MongoDB TLS support
  enabled: true
  #Specify pre-existing CA secret
  casecret: cluster-ca-cert
  issuer: icp-ca-issuer
  issuerKind: ClusterIssuer

# network ip version default is ipv4
network_ip_version: ipv4

  # Or  generate your own TLS CA by generating it via:
  # $ openssl genrsa -out ca.key 2048
  # $ openssl req -x509 -new -nodes -key ca.key -days 10000 -out ca.crt -subj "/CN=mydomain.com"
  # After that you can base64 encode it and paste it here:
  # $ cat ca.key | base64 -w0
  # cacert:
  # cakey:

# Prometheus Metrics Exporter
metrics:
  enabled: true
  image:
    repository: ibmcom/icp-mongodb-exporter
    tag: latest
    pullPolicy: IfNotPresent
  metricsUser: metrics
  metricsPassword: icpmetrics
  port: 9216
  path: "/metrics"
  socketTimeout: 3s
  syncTimeout: 1m
  prometheusServiceDiscovery: true
  resources:
    limits:
      memory: 256Mi

serviceAccountNameEnabled: false
      