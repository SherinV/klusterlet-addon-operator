{{- if .Values.reader.enabled }}
{{- if .Values.api.enabled }}

---
#
#  This service definition exposes the API server as a loadbalanced service named "metering-server"
#  in K8s so that it can be accessed as http://metering-server:4000/api/v1 in K8s.
#
# swagger documentation for the api is at the https://metering-server:4000/api/swagger endpoint
#

apiVersion: v1
kind: Service
metadata:
  name: metering-server
  labels:
    app: metering-server
    component: meteringsvc

spec:
  type: ClusterIP
  ports:
    - name: apiserver
      port: 4000
      targetPort: 4000

  selector:
    app: metering-reader
    component: meteringsvc

{{- end }}

---
#
# The metering-reader DaemonSet deploys a  pod on every node in a K8s cluster to collect information
# and send it to the metering service.
#
apiVersion: extensions/v1beta1
kind: DaemonSet
metadata:
  name: {{ template "metering-reader.fullname" . }}
  labels:
    app: metering-reader
    component: meteringsvc
spec:
  updateStrategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 1
  selector:
    matchLabels:
      app: metering-reader
      component: meteringsvc
  template:
    metadata:
      labels:
        app: metering-reader
        component: meteringsvc
      annotations:
        scheduler.alpha.kubernetes.io/critical-pod: ""
        seccomp.security.alpha.kubernetes.io/pod: docker/default
    spec:
      terminationGracePeriodSeconds: 60
      tolerations:
{{ toYaml .Values.reader.tolerations | indent 8 }}
      initContainers:
        - name: "metering-reader-secret-check"
          image: "{{ .Values.dm.image.repository }}:{{ .Values.dm.image.tag }}"
          imagePullPolicy: "{{ .Values.dm.image.pullPolicy }}"
          securityContext:
            allowPrivilegeEscalation: false
            readOnlyRootFilesystem: true
          env:
            - name: SECRET_LIST
              value: "{{- if .Values.api.enabled }} icp-serviceid-apikey-secret {{- end }}       {{ .Values.mongo.username.secret }}       {{ .Values.mongo.password.secret }} {{ .Values.mongo.clustercertssecret }} {{ .Values.mongo.clientcertssecret }}"
            - name: SECRET_DIR_LIST
              value: "{{- if .Values.api.enabled }} icp-serviceid-apikey-secret {{- end }} muser-{{ .Values.mongo.username.secret }} mpass-{{ .Values.mongo.password.secret }} {{ .Values.mongo.clustercertssecret }} {{ .Values.mongo.clientcertssecret }}"
          volumeMounts:
{{- if .Values.api.enabled }}
            - name: icp-serviceid-apikey-secret
              mountPath: /sec/icp-serviceid-apikey-secret
{{- end }}
            - name: muser-{{ .Values.mongo.username.secret }}
              mountPath: /sec/muser-{{ .Values.mongo.username.secret }}
            - name: mpass-{{ .Values.mongo.password.secret }}
              mountPath: /sec/mpass-{{ .Values.mongo.password.secret }}
            - name: mongodb-ca-cert
              mountPath: /sec/{{ .Values.mongo.clustercertssecret }}
            - name: mongodb-client-cert
              mountPath: /sec/{{ .Values.mongo.clientcertssecret }}
{{ toYaml .Values.secretcheck | indent 10 }}            

        - name: "metering-reader-init"
          image: "{{ .Values.dm.image.repository }}:{{ .Values.dm.image.tag }}"
          imagePullPolicy: "{{ .Values.dm.image.pullPolicy }}"
          securityContext:
            allowPrivilegeEscalation: false
            readOnlyRootFilesystem: true
          env:
            - name: NODE_TLS_REJECT_UNAUTHORIZED
              value: "0"
{{- if .Values.api.enabled }}
            - name: ICP_API_KEY
              valueFrom:
                secretKeyRef:
                  name: icp-serviceid-apikey-secret
                  key: ICP_API_KEY
                  optional: true
{{- end }}
            - name: HC_MONGO_HOST
              value: "{{ .Values.mongo.host }}"
            - name: HC_MONGO_PORT
              value: "{{ .Values.mongo.port }}"
            - name: HC_MONGO_USER
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.mongo.username.secret }}
                  key: {{ .Values.mongo.username.key }}
                  optional: true
            - name: HC_MONGO_PASS
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.mongo.password.secret }}
                  key: {{ .Values.mongo.password.key }}
                  optional: true
            - name: HC_MONGO_ISSSL
              value: "true"
            - name: HC_MONGO_SSL_CA
              value: "/certs/mongodb-ca/tls.crt"
            - name: HC_MONGO_SSL_CERT
              value: "/certs/mongodb-client/tls.crt"
            - name: HC_MONGO_SSL_KEY
              value: "/certs/mongodb-client/tls.key"
          volumeMounts:
            - name: mongodb-ca-cert
              mountPath: /certs/mongodb-ca
            - name: mongodb-client-cert
              mountPath: /certs/mongodb-client
          command: ["node", "/datamanager/lib/metering_init.js", "verifyOnlyMongo"]
{{- if .Values.imagePullSecrets }}
      imagePullSecrets:
      {{- range .Values.imagePullSecrets }}
        - name: {{ . }}
      {{- end}}
{{- end }}
{{- if .Values.serviceAccountNameEnabled }}
      serviceAccountName: {{ template "metering.fullname" . }}
{{- end }}
      containers:
        - name: metering-reader
          image: "{{ .Values.reader.image.repository }}:{{ .Values.reader.image.tag }}"
          imagePullPolicy: "{{ .Values.reader.image.pullPolicy }}"
          securityContext:
            allowPrivilegeEscalation: false
            readOnlyRootFilesystem: true
          resources:
{{ toYaml .Values.reader.resources | indent 12 }}
          ports:
            - containerPort: 3000
            - containerPort: 4000
          env:
            - name: METERING_API_ENABLED
              value: "{{ .Values.api.enabled }}"
            - name: HC_DM_USE_HTTPS
              value: "false"
            - name: HC_DM_MCM_RECEIVER_ENABLED
              value: "false"
            - name: HC_DM_MCM_SENDER_ENABLED
              value: "false"
            - name: HC_DM_MCMREADER_ENABLED
              value: "false"
            - name: HC_DM_READER_ENABLED
              value: "true"
            - name: HC_DM_STORAGEREADER_ENABLED
              value: "false"
            - name: HC_DM_READER_APIENABLED
              value: "{{ .Values.api.enabled }}"
            - name: HC_DM_REPORTER2_ENABLED
              value: "false"
            - name: HC_DM_PURGER2_ENABLED
              value: "false"
            - name: HC_DM_PREAGGREGATOR_ENABLED
              value: "false"
            - name: HC_DM_SELFMETER_PURGER_ENABLED
              value: "false"
            - name: HC_DM_IS_ICP
              value: "true"
            - name: NODE_TLS_REJECT_UNAUTHORIZED
              value: "0"
            - name: HC_DM_API_PORT
              value: "4000"
            - name: MY_NODE_NAME
              valueFrom:
                fieldRef:
                  fieldPath: spec.nodeName
{{- if .Values.api.enabled }}
            - name: ICP_API_KEY
              valueFrom:
                secretKeyRef:
                  name: icp-serviceid-apikey-secret
                  key: ICP_API_KEY
                  optional: true
{{- end }}
            - name: HC_MONGO_HOST
              value: "{{ .Values.mongo.host }}"
            - name: HC_MONGO_PORT
              value: "{{ .Values.mongo.port }}"
            - name: HC_MONGO_USER
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.mongo.username.secret }}
                  key: {{ .Values.mongo.username.key }}
                  optional: true
            - name: HC_MONGO_PASS
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.mongo.password.secret }}
                  key: {{ .Values.mongo.password.key }}
                  optional: true
            - name: HC_MONGO_ISSSL
              value: "true"
            - name: HC_MONGO_SSL_CA
              value: "/certs/mongodb-ca/tls.crt"
            - name: HC_MONGO_SSL_CERT
              value: "/certs/mongodb-client/tls.crt"
            - name: HC_MONGO_SSL_KEY
              value: "/certs/mongodb-client/tls.key"
{{- if .Values.api.enabled }}
            - name: CLUSTER_NAME
              value: {{ .Values.external.cluster_name }}
            - name: DEFAULT_IAM_TOKEN_SERVICE_PORT
              value: "{{ .Values.serviceport.iam_token }}"
            - name: DEFAULT_IAM_PAP_SERVICE_PORT
              value: "{{ .Values.serviceport.iam_pap }}"
{{- end }}
          readinessProbe:
            httpGet:
              path: "/readinessProbe"
              scheme: HTTP
              port: 3000
            initialDelaySeconds: 15
            periodSeconds: 30
            timeoutSeconds: 15
          livenessProbe:
            httpGet:
              path: "/livenessProbe"
              scheme: HTTP
              port: 3000
            initialDelaySeconds: 305
            periodSeconds: 300
            timeoutSeconds: 5
          volumeMounts:
            - name: mongodb-ca-cert
              mountPath: /certs/mongodb-ca
            - name: mongodb-client-cert
              mountPath: /certs/mongodb-client
      volumes:
        - name: mongodb-ca-cert
          secret:
            defaultMode: 0644
            secretName: {{ .Values.mongo.clustercertssecret }}
            optional: true
        - name: mongodb-client-cert
          secret:
            defaultMode: 0644
            secretName: {{ .Values.mongo.clientcertssecret }}
            optional: true
        - name: muser-{{ .Values.mongo.username.secret }}
          secret:
            defaultMode: 0644
            secretName: {{ .Values.mongo.username.secret }}
            optional: true
        - name: mpass-{{ .Values.mongo.password.secret }}
          secret:
            defaultMode: 0644
            secretName: {{ .Values.mongo.password.secret }}
            optional: true
{{- if .Values.api.enabled }}
        - name: icp-serviceid-apikey-secret
          secret:
            defaultMode: 0644
            secretName: icp-serviceid-apikey-secret
            optional: true
{{- end }}
{{- end }}
