# Licensed Materials - Property of IBM
# 5737-E67
# (C) Copyright IBM Corporation 2016, 2019 All Rights Reserved
# US Government Users Restricted Rights - Use, duplication or disclosure restricted by GSA ADP Schedule Contract with IBM Corp.

{{- if .Values.enabled }}
kind: Deployment
apiVersion: extensions/v1beta1
metadata:
  name: {{ template "work-manager.fullname" . }}
  labels:
    app: {{ template "work-manager.name" . }}
    chart: {{ template "work-manager.chart" . }}
    component: "work-manager"
    release: {{ .Release.Name }}
    heritage: {{ .Release.Service }}
    connectionManager: {{ .Values.connectionManager }}
spec:
  replicas: 1
  revisionHistoryLimit: 2
  selector:
    matchLabels:
      app: {{ template "work-manager.name" . }}
      component: "work-manager"
      release: {{ .Release.Name }}
  template:
    metadata:
      labels:
        app: {{ template "work-manager.name" . }}
        component: "work-manager"
        controller: "operator"
        release: {{ .Release.Name }}
        heritage: {{ .Release.Service }}
        chart: {{ template "work-manager.chart" . }}
      annotations:
        productName: "IBM Multicloud Manager - Klusterlet"
        productID: "c18240a57c1c41969d5e81b39435da6c"
        productVersion: "3.2.0"
    spec:
      serviceAccountName: {{ template "work-manager.fullname" . }}
      containers:
      {{- if .Values.workManager.enabled }}
      - name: work-manager
        image: "{{ .Values.workManager.image.repository }}:{{ .Values.workManager.image.tag }}"
        imagePullPolicy: {{ .Values.workManager.image.pullPolicy }}
        args:
          - "/klusterlet"
          - "--controller-config-file=/var/run/klusterlet/kubeconfig"
          - "--cluster-name={{ .Values.clusterName }}"
          - "--cluster-namespace={{ .Values.clusterNamespace }}"
          - "--cluster-labels={{ if .Values.clusterLabels.cloud}}cloud={{.Values.clusterLabels.cloud}}{{ end }},{{ if .Values.clusterLabels.vendor}}vendor={{.Values.clusterLabels.vendor}}{{ end }},{{ if .Values.clusterLabels.environment}}environment={{.Values.clusterLabels.environment}}{{ end }},{{ if .Values.clusterLabels.region}}region={{.Values.clusterLabels.region}}{{ end }},{{ if .Values.clusterLabels.datacenter}}datacenter={{.Values.clusterLabels.datacenter}}{{ end }},{{ if .Values.clusterLabels.owner}}owner={{.Values.clusterLabels.owner}}{{ end }}"
        {{- if .Values.tillerIntegration.enabled }}
        {{- if .Values.tillerIntegration.endpoint }}
          - "--tiller-endpoint={{ .Values.tillerIntegration.endpoint }}"
        {{- end }}
        {{- if or .Values.tillerIntegration.secret .Values.tillerIntegration.autoGenSecret }}
          - "--tiller-cert=/etc/helm/tls.crt"
          - "--tiller-key=/etc/helm/tls.key"
        {{- end }}
        {{- end }}
          - "--helm-release-prefix={{ .Values.tillerIntegration.helmReleasePrefix }}"
        {{- if .Values.deployedOnHub }}
          - "--klusterlet-address={{ template "work-manager.fullname" . }}.{{ .Release.Namespace }}.svc"
        {{- else if eq .Values.service.type "LoadBalancer" }}
          - "--klusterlet-service={{ .Release.Namespace }}/{{ template "work-manager.fullname" . }}"
        {{- else if eq .Values.ingress.type "Ingress" }}
          - "--klusterlet-ingress={{ .Release.Namespace }}/{{ template "work-manager.fullname" . }}"
        {{- if .Values.ingress.host }}
          - "--klusterlet-address={{ .Values.ingress.host }}"
        {{- else }}
          - "--klusterlet-address={{ .Values.clusterName }}.klusterlet.mcm"
        {{- end }}
        {{- if .Values.ingress.port }}
          - "--klusterlet-port={{ .Values.ingress.port }}"
        {{- end }}
        {{- else if eq .Values.ingress.type "Route" }}
        {{- if .Values.ingress.host }}
          - "--klusterlet-address={{ .Values.ingress.host }}"
        {{- end }}
        {{- if .Values.ingress.port }}
          - "--klusterlet-port={{ .Values.ingress.port }}"
        {{- end }}
        {{- end }}
        {{- if .Values.prometheusIntegration.enabled }}
        {{- if .Values.prometheusIntegration.service }}
          - "--prometheus-service={{ .Values.prometheusIntegration.service }}"
        {{- end }}
        {{- if .Values.prometheusIntegration.secret }}
          - "--prometheus-secret={{ .Values.prometheusIntegration.secret }}"
        {{- end }}
        {{- if .Values.prometheusIntegration.useBearerToken }}
          - "--prometheus-use-bearer-token={{ .Values.prometheusIntegration.useBearerToken }}"
        {{- end }}
        {{- end }}
        livenessProbe: null
        readinessProbe: null
        volumeMounts:
          - name: klusterlet-config
            mountPath: /var/run/klusterlet
        {{- if or .Values.tillerIntegration.secret .Values.tillerIntegration.autoGenSecret }}
          - name: tiller-secret
            mountPath: /etc/helm
        {{- end }}
      {{- end }}
      {{- if .Values.deployable.enabled }}
      - name: deployable-controller
        image: "{{ .Values.deployable.image.repository }}:{{ .Values.deployable.image.tag }}"
        imagePullPolicy: "{{ .Values.deployable.image.pullPolicy }}"
        securityContext:
          privileged: false
          readOnlyRootFilesystem: false
          allowPrivilegeEscalation: false
          runAsNonRoot: true
          runAsUser: 1000
          capabilities:
            drop:
            - ALL
        command: ["./manager"]
        args:
          - "--alsologtostderr"
          - "--managed-cluster-name={{ .Values.clusterName }}"
          - "--managed-cluster-namespace={{ .Values.clusterNamespace }}"
          - "--remote-cluster-configfile=/var/run/klusterlet/kubeconfig"
        volumeMounts:
          - name: klusterlet-config
            mountPath: /var/run/klusterlet
      {{- end }}
      volumes:
        - name: klusterlet-config
          secret:
            secretName: {{ .Values.connectionManager }}-hub-kubeconfig
      {{- if .Values.tillerIntegration.secret }}
        - name: tiller-secret
          secret:
            secretName: {{ .Values.tillerIntegration.secret }}
      {{- else if .Values.tillerIntegration.autoGenSecret}}
        - name: tiller-secret
          secret:
            secretName: {{ template "work-manager.fullname" . }}-tiller-client-certs
      {{- end }}
      {{- if .Values.imagePullSecret }}
      imagePullSecrets:
      - name: "{{ .Values.imagePullSecret }}"
      {{- end }}
      {{- with .Values.nodeSelector }}
      nodeSelector:
{{ toYaml . | indent 8 }}
      {{- end }}
      {{- with .Values.affinity }}
      affinity:
{{ toYaml . | indent 8 }}
      {{- end }}
      {{- with .Values.tolerations }}
      tolerations:
{{ toYaml . | indent 8 }}
      {{- end }}
{{- end }}

