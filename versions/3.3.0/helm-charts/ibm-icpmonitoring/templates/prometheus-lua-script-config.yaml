{{- if .Values.prometheus.enabled -}}

# Licensed Materials - Property of IBM
# IBM Confidential
# OCO Source Materials
# @ Copyright IBM Corporation 2016, 2019. All Rights Reserved.
# The source code for this program is not published or otherwise divested of its trade secrets, irrespective of what has been deposited with the U.S. Copyright Office.

apiVersion: v1
kind: ConfigMap
metadata:
  labels:
    app: {{ template "prometheus.fullname" . }}
    component: prometheus
    chart: {{ .Chart.Name }}-{{ .Chart.Version }}
    release: {{ .Release.Name }}
    heritage: {{ .Release.Service }}
  name: {{ template "prometheus.fullname" . }}-lua-script-config
data:
  prom.lua: |-
    local cjson = require "cjson"
    local util = require "monitoring-util"
    local http = require "lib.resty.http"
    local operators = {count_values=true, group_left=true, group_right=true}

    local function query_label_key()
    {{- if .Values.standalone }}
        return "kubernetes_namespace"
    {{- else }}
        return "hub_kubernetes_namespace"
    {{- end }}
    end

    local function inject_query(namespaces, query)
        local query_string = query_label_key()..'=~"'
        for i, entry in ipairs(namespaces) do
            query_string = query_string .. entry.namespaceId
            query_string = query_string .. "|"
        end
        if query_string == query_label_key()..'=~"' then
            return nil, util.exit_401()
        end
        --- remove the last |
        query_string = string.sub(query_string, 1, -2)
    {{- if .Values.standalone }}
        query_string = query_string .. '"'
    {{- else }}
        local cluster_query_string = 'cluster_name=~"'
        for i, entry in ipairs(namespaces) do
            local cluster_name = util.get_cluster(entry.namespaceId)
            if cluster_name ~= nil then
                cluster_query_string = cluster_query_string .. cluster_name
                cluster_query_string = cluster_query_string .. "|"
            end
        end
        if cluster_query_string ~= 'cluster_name=~"' then
            query_string = query_string .. '|",' .. cluster_query_string .. '",metrics_type!="system"'
        else
            query_string = query_string .. '", metrics_type!="system"'
        end
    {{- end }}
        ngx.log(ngx.DEBUG, "query_string ", query_string)

        --- assume metric's name format is A_B_C
        --- first step is to retrieve all metric names in query string
        --- remove 4 exceptions: 1. by (A_B_C) 2. {A_B_C=""} 3. [A_B_C] 4. A_B_C() 5. "A_B_C"
        local metrics_str = query:gsub("by %([^%(%)]+%)", "---")
        metrics_str = metrics_str:gsub("by%([^%(%)]+%)", "---")
        metrics_str = metrics_str:gsub("{[^%}]+}", "---")
        metrics_str = metrics_str:gsub("%[[^%]]+%]", "---")
        metrics_str = metrics_str:gsub("([_%w]+_[_%w]+)%(", "---")
        metrics_str = metrics_str:gsub('%"([_%w]+_[_%w]+)%"', "---")

        --- To inject query string
        --- if there is already label filter append the query string to existing ones
        --- if no label filter add it
        for metric in string.gmatch(metrics_str, "([_:%w]+_[_:%w]+)") do
            if not operators[metric] then
                if string.find(query, metric .."{") then
                    query = query:gsub(metric .."{([^%}]*)}", metric .. "{%1," .. query_string .. "}")
                else
                    query = query:gsub(metric, metric .. "{" .. query_string .. "}")
                end
                --- handle the original query string with empty curly like A_B_C{}
                if string.find(query, metric .."{,") then
                    query = query:gsub(metric .."{,", metric .."{")
                end
            end
        end
        --- handle the query string w/o metrics but only labels like {label=""}
        if string.match(query, "^{[^{}]*}$") ~= nil then
            if query == "{}" then
                query = "{" .. query_string .. "}"
            else
                query = string.sub(query, 1, -2) .. "," .. query_string .. "}"
            end
        end
        ngx.log(ngx.DEBUG, "updated query " .. query)
        return query
    end

    local function get_releases(token, time)
        local httpc = http.new()
        local res, err = httpc:request_uri("http://helm-api.kube-system.svc.{{ .Values.clusterDomain }}:3000/api/v1/releases", {
            method = "GET",
            headers = {
              ["Content-Type"] = "application/json",
              ["Authorization"] = "Bearer ".. token,
              ["cookie"] = "cfc-access-token-cookie="..token
            }
        })
        if not res then
            ngx.log(ngx.ERR, "Failed to get helm releases",err)
            return nil, util.exit_500()
        end
        if (res.body == "" or res.body == nil) then
            ngx.log(ngx.ERR, "Empty response body")
            return nil, util.exit_500()
        end
        local x = tostring(res.body)
        ngx.log(ngx.DEBUG, "response is ",x)
        local releases_result = cjson.decode(x).data
        local release_list = {}
        for index, release in ipairs(releases_result) do
            local release_attrs = {}
            release_attrs.__name__ = "helm_release_info"
            release_attrs.release_name = release.attributes.name
            release_attrs.chart_name = release.attributes.chartName
            release_attrs.chart_version = release.attributes.chartVersion
            release_attrs.status = release.attributes.status
            release_attrs.namespace = release.attributes.namespace
            table.insert(release_list, release_attrs)
            local release_str = cjson.encode(release_list)
        end
        return release_list, nil
    end

    local function get_release_pods(token, release_name)
        ngx.log(ngx.DEBUG, "Check pod of release ",release_name)
        local no_pods_str = "NONE"
        if release_name == "" then
            return no_pods_str
        end
        local httpc = http.new()
        local res, err = httpc:request_uri("http://helm-api.kube-system.svc.{{ .Values.clusterDomain }}:3000/api/v1/releases/"..release_name, {
            method = "GET",
            headers = {
              ["Content-Type"] = "application/json",
              ["Authorization"] = "Bearer ".. token,
              ["cookie"] = "cfc-access-token-cookie="..token
            }
        })
        if not res then
            ngx.log(ngx.ERR, "Failed to get pods of release ",err)
            return no_pods_str
        end
        if res.status == 404 then
            ngx.log(ngx.ERR, "The release does not exist: ", release_name)
            return no_pods_str
        end
        if (res.body == "" or res.body == nil) then
            ngx.log(ngx.ERR, "Empty response body")
            return no_pods_str
        end
        local x = tostring(res.body)
        ngx.log(ngx.DEBUG, "response is ",x)
        local resources_str = cjson.decode(x).data.attributes.resources
        local s_index = string.find(resources_str, "==> v1/Pod")
        if s_index == nil then
            return no_pods_str
        end
        local e_index = string.find(resources_str, "==>", s_index + 1)
        local pod_str
        if e_index ~= nil then
            pod_str = string.sub(resources_str, s_index, e_index)
        else
            pod_str = string.sub(resources_str, s_index)
        end
        local i=1
        local pods=""
        for pod_line in string.gmatch(pod_str, "([^\n]+)") do
            if string.find(pod_line, " ") ~= nil then
                if i > 2 then
                    pod_name = string.sub(pod_line, 1, string.find(pod_line, " ") - 1)
                    if i ~= 3 then
                        pod_name = "|"..pod_name
                    end
                    pods=pods..pod_name
                end
            end
            i = i + 1
        end
        ngx.log(ngx.DEBUG, "pods string is ",pods)
        return pods
    end

    local function write_release_response()
        local token, err = util.get_auth_token()
        if err ~= nil then
            err()
        else
            local release_list, err = get_releases(token, nil)
            if err ~= nil then
                err()
            else
                local response = {}
                response.status = "success"
                response.data = release_list
                local response_str = cjson.encode(response)
                ngx.log(ngx.DEBUG, "resp is ", response_str)
                ngx.header["Content-type"] = "application/json"
                ngx.say(response_str)
                ngx.exit(200)
            end
        end
    end

    local function rewrite_query()
        local args = ngx.req.get_uri_args()
        local query_key = nil
        if args["query"] ~= nil then
            query_key = "query"
        else
            if args["match[]"] ~= nil then
                query_key = "match[]"
            end
        end
        if query_key ~= nil then
            local query = args[query_key]
            local token, err = util.get_auth_token()
            if err ~= nil then
                return err
            end
            if token ~= nil then
                local uid, err = util.get_user_id(token)
                if err ~= nil then
                    return err
                end
                local role_id, err = util.get_user_role(token, uid)
                if err ~= nil then
                    return err
                end
                if (role_id ~= '"ClusterAdministrator"' ) then
                    local namespaces, err = util.get_user_namespaces(token, uid)
                    if err ~= nil then
                        return err
                    end
                    local updated_query, err = inject_query(namespaces, query)
                    if err ~= nil then
                        return err
                    end
                    args[query_key] = updated_query
                    ngx.req.set_uri_args(args)
                end

                --- replace release_name="release1" to pod_name=~"pod1|pod2|pod3"
                if (string.find(query, "release_name=") ~= nil) then
                    local start_index,end_index = string.find(query, "release_name=[^},]+")
                    local release_name = string.sub(query, start_index + 14, end_index - 1)
                    local pod_list = get_release_pods(token, release_name)
                    local updated_query = string.gsub(query, "release_name=[^},]+", "pod_name=~\""..pod_list.."\"")
                    ngx.log(ngx.DEBUG, 'updated_query is ', updated_query)
                    args[query_key] = updated_query
                    ngx.req.set_uri_args(args)
                end
            end
        end
    end

    local function filter_alertmanager_url()
        targetstr = '<a href="https://{{ template "prometheus.fullname" . }}-alertmanager:9093">{{ template "prometheus.fullname" . }}-alertmanager:9093</a>'
        replacestr = '{{ template "prometheus.fullname" . }}-alertmanager:9093'
        ngx.arg[1] = ngx.re.sub(ngx.arg[1], targetstr, replacestr)
    end

    -- Expose interface.
    local _M = {}
    _M.rewrite_query = rewrite_query
    _M.write_release_response = write_release_response
    _M.filter_alertmanager_url = filter_alertmanager_url

    return _M
{{- end -}}