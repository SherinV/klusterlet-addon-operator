{{- if .Values.grafana.enabled -}}
# Licensed Materials - Property of IBM
# @ Copyright IBM Corporation 2016, 2019. All Rights Reserved.
# US Government Users Restricted Rights - Use, duplication or disclosure restricted by GSA ADP Schedule Contract with IBM Corp.

apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: {{ template "grafana.fullname" . }}
    chart: {{ .Chart.Name }}
    component: grafana
    release: {{ .Release.Name }}
    heritage: {{ .Release.Service }}
  name: {{ template "grafana.fullname" . }}
spec:
  replicas: 1
  selector:
    matchLabels:
      app: {{ template "grafana.fullname" . }}
      component: grafana
      release: "{{ .Release.Name }}"
  template:
    metadata:
      labels:
        app: {{ template "grafana.fullname" . }}
        chart: {{ .Chart.Name }}
        component: grafana
        release: "{{ .Release.Name }}"
        heritage: {{ .Release.Service }}
      name: {{ template "grafana.fullname" . }}
      annotations:
        scheduler.alpha.kubernetes.io/critical-pod: ""
    spec:
{{- if eq .Values.mode "managed" }}
      priorityClassName: system-cluster-critical
{{- end }}
    {{- if .Values.imagePullSecrets }}
      imagePullSecrets:
        - name: {{ .Values.imagePullSecrets }}
    {{- end }}
      hostPID: false
      hostIPC: false
      hostNetwork: false
      initContainers:
        - name: init-container
          image: "{{ .Values.init.image.repository }}:{{ .Values.init.image.tag }}"
          imagePullPolicy: "{{ .Values.imagePullPolicy }}"
          securityContext:
            allowPrivilegeEscalation: false
            privileged: false
            capabilities:
              drop:
              - ALL
          command: ["/opt/entry/entrypoint.sh"]
          volumeMounts:
            - name: grafana-storage
              mountPath: "/var/lib/grafana"
            - name: grafana-ds-entry
              mountPath: "/opt/entry"
            - name: datasource-config
              mountPath: "/etc/grafana/provisioning/datasources"
          {{- if .Values.tls.enabled }}
            - name: monitoring-client-certs
              mountPath: "/opt/ibm/monitoring/certs"
            - name: monitoring-ca-certs
              mountPath: "/opt/ibm/monitoring/ca-certs"
          {{- end }}
      containers:
        - name: grafana
          image: {{ .Values.grafana.image.repository }}:{{ .Values.grafana.image.tag }}
          imagePullPolicy: {{ .Values.imagePullPolicy }}
          securityContext:
            allowPrivilegeEscalation: true
            privileged: true
            capabilities:
              drop:
              - ALL
              add: [CHOWN, NET_ADMIN, NET_RAW, LEASE, SETGID, SETUID]
          env:
            - name: GF_SECURITY_ADMIN_USER
              valueFrom:
                secretKeyRef:
                  name: {{ template "grafana.fullname" . }}-secret
                  key: username
            - name: GF_SECURITY_ADMIN_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ template "grafana.fullname" . }}-secret
                  key: password
          ports:
          - name: web
            containerPort: 3000
        {{- if .Values.grafana.probe.enabled }}
          readinessProbe:
            httpGet:
              path: /api/health
              {{- if .Values.tls.enabled }}
              port: {{ .Values.clusterPort }}
              scheme: HTTPS
              {{- else }}
              port: 3000
              {{- end }}
            initialDelaySeconds: 30
            timeoutSeconds: 30
            periodSeconds: 10
          livenessProbe:
            httpGet:
              path: /api/health
              {{- if .Values.tls.enabled }}
              port: {{ .Values.clusterPort }}
              scheme: HTTPS
              {{- else }}
              port: 3000
              {{- end }}
            initialDelaySeconds: 30
            timeoutSeconds: 30
            periodSeconds: 10
        {{- end }}
          resources:
{{ toYaml .Values.grafana.resources | indent 12 }}
          volumeMounts:
            - name: grafana-storage
              mountPath: "/var/lib/grafana"
            - name: config-volume
              mountPath: "/etc/grafana/grafana.ini"
              subPath: grafana.ini
            - name: dashboard-volume
              mountPath: "/etc/grafana/dashboards/grafana"
            - name: dashboard-config
              mountPath: "/etc/grafana/provisioning/dashboards"
            - name: datasource-config
              mountPath: "/etc/grafana/provisioning/datasources"
          {{- if or (eq .Values.mode "managed") .Values.tls.enabled }}
            - name: monitoring-certs
              mountPath: "/opt/ibm/monitoring/certs"
          {{- end }}
      {{- if eq .Values.mode "managed" }}
        - name: dashboard-crd-controller
          image: {{ .Values.dashboardController.image.repository }}:{{ .Values.dashboardController.image.tag }}
          imagePullPolicy: "{{ .Values.imagePullPolicy }}"
          securityContext:
            allowPrivilegeEscalation: false
            privileged: false
            capabilities:
              drop:
              - ALL
              add: [CHOWN, NET_ADMIN, NET_RAW, LEASE, SETGID, SETUID]
          resources:
{{ toYaml .Values.dashboardController.resources | indent 12 }}
          command: ["/grafana/entry/run.sh"]
          env:
            - name: USER
              valueFrom:
                secretKeyRef:
                  name: {{ template "grafana.fullname" . }}-secret
                  key: username
            - name: PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ template "grafana.fullname" . }}-secret
                  key: password
            - name: PROMETHEUS_HOST
              value: "{{ template "prometheus.fullname" . }}"
            - name: PROMETHEUS_PORT
              value: "{{ .Values.prometheus.port }}"
            - name: PORT
            {{- if .Values.tls.enabled }}
              value: "{{ .Values.clusterPort }}"
            {{- else }}
              value: "3000"
            {{- end }}
            - name: IS_HUB_CLUSTER
            {{- if .Values.standalone }}
              value: "false"
            {{- else }}
              value: "true"
            {{- end }}
          volumeMounts:
            - name: grafana-crd-entry
              mountPath: "/grafana/entry"
          {{- if .Values.tls.enabled }}
            - name: monitoring-client-certs
              mountPath: "/opt/ibm/monitoring/certs"
            - name: monitoring-ca-certs
              mountPath: "/opt/ibm/monitoring/ca-certs"
            - name: default-dashboards-config
              mountPath: "/opt/dashboards"
          {{- end }}
      {{- end }}
      {{- if .Values.tls.enabled }}
        - name: router
          image: {{ .Values.router.image.repository }}:{{ .Values.router.image.tag }}
          imagePullPolicy: {{ .Values.imagePullPolicy }}
          securityContext:
            allowPrivilegeEscalation: false
            privileged: false
            readOnlyRootFilesystem: false
            capabilities:
              drop:
              - ALL
              add: [CHOWN, NET_ADMIN, NET_RAW, LEASE, SETGID, SETUID]
          resources:
{{ toYaml .Values.router.resources | indent 12 }}
          command: ["/opt/ibm/router/entry/entrypoint.sh"]
        {{- if and (eq .Values.mode "managed") .Values.grafana.probe.enabled }}
{{ include "router.probes" (list .Values.clusterDomain) | indent 10 }}
        {{- end }}
          env:
            - name: GF_SECURITY_ADMIN_USER
              valueFrom:
                secretKeyRef:
                  name: {{ template "grafana.fullname" . }}-secret
                  key: username
            - name: GF_SECURITY_ADMIN_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ template "grafana.fullname" . }}-secret
                  key: password
          ports:
          - name: router
            containerPort: 8080
          volumeMounts:
            - mountPath: "/opt/ibm/router/conf"
              name: router-config
            - mountPath: "/opt/ibm/router/caCerts"
              name: monitoring-ca-certs
            - mountPath: "/opt/ibm/router/certs"
              name: monitoring-certs
            - mountPath: "/opt/ibm/router/entry"
              name: router-entry
            - name: grafana-storage
              mountPath: "/test"
              readOnly: true
          {{- if eq .Values.mode "managed" }}
            - mountPath: "/opt/lua-scripts"
              name: grafana-lua-script-config
            - mountPath: "/opt/ibm/router/nginx/conf/monitoring-util.lua"
              subPath: monitoring-util.lua
              name: util-lua-script-config
          {{- end }}
      {{- end }}
      volumes:
        - name: grafana-storage
      {{- if .Values.grafana.persistentVolume.enabled }}
          persistentVolumeClaim:
          {{- if .Values.grafana.persistentVolume.existingClaimName }}
            claimName: {{ .Values.grafana.persistentVolume.existingClaimName }}
          {{- else }}
            claimName: {{ template "grafana.fullname" . }}
          {{- end }}
      {{- else }}
          emptyDir: {}
      {{- end }}
        - name: config-volume
          configMap:
            name: {{ template "grafana.fullname" . }}
        - name: dashboard-config
          configMap:
            name: {{ template "grafana.fullname" . }}-dashboard-config
        - name: dashboard-volume
          emptyDir: {}
        - name: grafana-crd-entry
          configMap:
            name: {{ template "grafana.fullname" . }}-grafana-crd-entry
            defaultMode: 0777
        - name: datasource-config
          emptyDir: {}
        - name: grafana-ds-entry
          configMap:
            name: {{ template "grafana.fullname" . }}-ds-entry-config
            defaultMode: 0744
      {{- if .Values.tls.enabled }}
        - name: router-config
          configMap:
            name: {{ template "grafana.fullname" . }}-router-nginx-config
        - name: monitoring-ca-certs
          secret:
            secretName: {{ .Values.tls.ca.secretName }}
        - name: monitoring-certs
          secret:
          {{- if .Values.tls.server.existingSecretName }}
            secretName: {{ .Values.tls.server.existingSecretName }}
          {{- else }}
            secretName: {{ template "monitoring.fullname" . }}-certs
          {{- end }}
        - name: monitoring-client-certs
          secret:
          {{- if .Values.tls.client.existingSecretName }}
            secretName: {{ .Values.tls.client.existingSecretName }}
          {{- else }}
            secretName: {{ template "monitoring.fullname" . }}-client-certs
          {{- end }}
        - name: router-entry
          configMap:
            name: {{ template "monitoring.fullname" . }}-router-entry-config
            defaultMode: 0744
      {{- end }}
      {{- if eq .Values.mode "managed" }}
        - name: grafana-lua-script-config
          configMap:
            name: {{ template "grafana.fullname" . }}-lua-script-config
        - name: util-lua-script-config
          configMap:
            name: {{ template "monitoring.fullname" . }}-lua-script-config
        - name: default-dashboards-config
          configMap:
            name: {{ template "grafana.fullname" . }}-default-dashboards-config
      {{- end }}
{{- end -}}
