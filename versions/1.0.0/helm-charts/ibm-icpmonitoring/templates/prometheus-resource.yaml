{{- if .Values.prometheus.enabled -}}
# Licensed Materials - Property of IBM
# @ Copyright IBM Corporation 2016, 2019. All Rights Reserved.
# US Government Users Restricted Rights - Use, duplication or disclosure restricted by GSA ADP Schedule Contract with IBM Corp.

apiVersion: monitoring.coreos.com/v1
kind: Prometheus
metadata:
  labels:
    app: {{ template "prometheus.fullname" . }}
    chart: {{ .Chart.Name }}
    component: prometheus
    release: {{ .Release.Name }}
    heritage: {{ .Release.Service }}
  name: {{ template "prometheus.fullname" . }}
spec:
  alerting:
    alertmanagers:
      - namespace: {{ .Release.Namespace }}
        name: {{ template "prometheus.fullname" . }}-alertmanager
        port: web
      {{- if .Values.tls.enabled }}
        scheme: https
        tlsConfig:
        {{- if .Values.tls.client.existingSecretName }}
          certFile: /etc/prometheus/secrets/{{ .Values.tls.client.existingSecretName }}/{{ .Values.tls.client.certFieldName }}
          keyFile: /etc/prometheus/secrets/{{ .Values.tls.client.existingSecretName }}/{{ .Values.tls.client.keyFieldName }}
        {{- else }}
          certFile: /etc/prometheus/secrets/{{ template "monitoring.fullname" . }}-client-certs/{{ .Values.tls.client.certFieldName }}
          keyFile: /etc/prometheus/secrets/{{ template "monitoring.fullname" . }}-client-certs/{{ .Values.tls.client.keyFieldName }}
        {{- end }}
          insecureSkipVerify: true
      {{- else }}
        scheme: http
        pathPrefix: /alertmanager
      {{- end }}
  ruleNamespaceSelector: {}
  ruleSelector:
    matchLabels:
      component: icp-prometheus
  podMetadata:
    labels:
      app: {{ template "prometheus.fullname" . }}
      chart: {{ .Chart.Name }}
      component: prometheus
      release: {{ .Release.Name }}
      heritage: {{ .Release.Service }}
    annotations:
      scheduler.alpha.kubernetes.io/critical-pod: ""
      pvJob: "true"
  baseImage: {{ .Values.prometheus.image.repository }}
  version: {{ .Values.prometheus.image.tag }}
  replicas: 1
{{- if .Values.imagePullSecrets }}
  imagePullSecrets:
    - name: {{ .Values.imagePullSecrets }}
{{- end }}
  retention: {{ .Values.prometheus.retention }}
  scrapeInterval: {{ .Values.prometheus.scrapeInterval }}
  evaluationInterval: {{ .Values.prometheus.evaluationInterval }}
  enableAdminAPI: true
  externalUrl: https://{{ .Values.clusterAddress }}:{{ .Values.clusterPort }}/prometheus
  routePrefix: /prometheus
  resources:
{{ toYaml .Values.prometheus.resources | indent 4 }}
{{- if .Values.tls.enabled }}
  secrets:
    - {{ .Values.tls.ca.secretName }}
  {{- if .Values.tls.server.existingSecretName }}
    - {{ .Values.tls.server.existingSecretName }}
  {{- else }}
    - {{ template "monitoring.fullname" . }}-certs
  {{- end }}
  {{- if .Values.tls.client.existingSecretName }}
    - {{ .Values.tls.client.existingSecretName }}
  {{- else }}
    - {{ template "monitoring.fullname" . }}-client-certs
  {{- end }}
{{- end }}
{{- if and (eq .Release.Namespace "kube-system") .Values.prometheus.etcdTarget.enabled }}
  {{- if not .Values.tls.enabled }}
  secrets:
  {{- end }}
    - {{ .Values.prometheus.etcdTarget.secret }}
{{- end }}
{{- if .Values.tls.enabled }}
  configMaps:
    - {{ template "prometheus.fullname" . }}-router-nginx-config
    - {{ template "monitoring.fullname" . }}-router-entry-config
{{- end }}
{{- if eq .Values.mode "managed" }}
  {{- if not .Values.tls.enabled }}
  configMaps:
  {{- end }}
    - {{ template "prometheus.fullname" . }}-lua-script-config
    - {{ template "monitoring.fullname" . }}-lua-script-config
{{- end }}
{{- if eq .Values.mode "managed" }}
  priorityClassName: system-cluster-critical
{{- end }}
  serviceMonitorSelector:
    matchExpressions:
      - {key: "prometheus", operator: "DoesNotExist", values: []}
{{- if .Values.tls.enabled }}
  additionalScrapeConfigs:
    name: {{ template "prometheus.fullname" . }}-scrape-targets
    key: scrape-targets.yml
  hostPID: false
  hostIPC: false
  hostNetwork: false
  containers:
    - name: router
      image: {{ .Values.router.image.repository }}:{{ .Values.router.image.tag }}
      imagePullPolicy: {{ .Values.imagePullPolicy }}
      securityContext:
        allowPrivilegeEscalation: false
        privileged: false
        readOnlyRootFilesystem: false
        capabilities:
          drop:
          - ALL
          add: [CHOWN, NET_ADMIN, NET_RAW, LEASE, SETGID, SETUID]
      resources:
{{ toYaml .Values.router.resources | indent 8 }}
      command: ["/bin/sh", "-c", "cp /opt/ibm/router/entry/entrypoint.sh /opt/ibm/router/; chmod 744 /opt/ibm/router/entrypoint.sh;exec /opt/ibm/router/entrypoint.sh"]
    {{- if and (eq .Values.mode "managed") .Values.prometheus.probe.enabled }}
{{ include "router.probes" (list .Values.clusterDomain) | indent 6 }}
    {{- end }}
      ports:
      - name: router
        containerPort: 8080
      volumeMounts:
        - mountPath: "/opt/ibm/router/conf"
          name: configmap-{{ template "prometheus.fullname" . }}-router-nginx-config
        - mountPath: "/opt/ibm/router/caCerts"
          name: secret-{{ .Values.tls.ca.secretName }}
        - mountPath: "/opt/ibm/router/certs"
          name: secret-{{ template "monitoring.fullname" . }}-certs
        - mountPath: "/opt/ibm/router/entry"
          name: configmap-{{ template "monitoring.fullname" . }}-router-entry-config
      {{- if eq .Values.mode "managed" }}
        - mountPath: "/opt/ibm/router/nginx/conf/monitoring-util.lua"
          subPath: monitoring-util.lua
          name: configmap-{{ template "monitoring.fullname" . }}-lua-script-config
        - mountPath: "/opt/ibm/router/nginx/conf/prom.lua"
          subPath: prom.lua
          name: configmap-{{ template "prometheus.fullname" . }}-lua-script-config
      {{- end }}
{{- end }}
{{- if .Values.prometheus.persistentVolume.enabled }}
  storage:
    volumeClaimTemplate:
      spec:
        storageClassName: {{ default "" .Values.prometheus.persistentVolume.storageClass | quote }}
        accessModes: ["ReadWriteOnce"]
        resources:
          requests:
            storage: {{ .Values.prometheus.persistentVolume.size | quote }}
      {{- if .Values.prometheus.persistentVolume.selector.label }}
        selector:
          matchExpressions:
            - {key: {{ .Values.prometheus.persistentVolume.selector.label }}, operator: In, values: [{{ .Values.prometheus.persistentVolume.selector.value }}]}
      {{- end }}
{{- end }}
{{- end -}}
